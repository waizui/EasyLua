local __cls = {}

---@param className string
---@return any
function FindClass(className)
    if (not className) or (className == "") then
        return nil
    end

    local base = __cls[className]
    return base
end

local oopMetaTable = {
    __index = function(instance, key)
        local className = instance.__class.__clsName
        while (true) do
            -- search class template first 
            local class = FindClass(className)
            if (not class) then
                -- TODO:performance issue when index nil 
                return nil
            end

            local classVal = rawget(class, key)

            if (classVal ~= nil) then
                -- caching in order to prevent to search everytime 
                rawset(instance, key, classVal)
                return classVal
            end
            className = class.__baseClsName
        end
    end
}

-- class template
---@class Class
local Class = {
    __clsName,
    __baseClsName,
    __index = function(cls, key)
        -- template is different to instence ,so searching the super class 
        local className = cls.__baseClsName
        while (true) do
            local class = FindClass(className)
            if (not class) then
                -- TODO: performance when index nil
                return nil
            end

            local classVal = rawget(class, key)

            if (classVal ~= nil) then
                -- caching
                rawset(cls, key, classVal)
                return classVal
            end
            className = class.__baseClsName
        end
    end
}

---@return string
function Class:GetClassName()
    return self.__clsName
end

---@return string
function Class:GetBaseName()
    return self.__baseClsName
end

---@param  cls Class
---@param name string
---@param baseClsName string
function RegClass(cls, name, baseClsName)
    local c = __cls[name]
    if c then
        error("class already exist: " .. name)
    end
    if (not cls) then
        error("not class specified: " .. name)
    end
    setmetatable(cls, Class)
    cls.GetClassName = Class.GetClassName
    cls.GetBaseName = Class.GetBaseName
    cls.__clsName = name
    cls.__baseClsName = baseClsName or "LuaObject"
    __cls[name] = cls
end

---@generic T
---@param cls T | string
---@return T
function NewClass(cls, ...)
    local clsName = cls.__clsName or cls
    local class = __cls[clsName]
    if (not class) then
        error(tostring(clsName) .. " class is nil can not create instance")
    end
    local ins = {}
    ins.__class = class
    setmetatable(ins, oopMetaTable)
    local ctor = ins.Ctor
    if ctor then
        ctor(ins, ...)
    end
    return ins
end

---@param instance LuaObject
---@return Class
function ClassOf(instance)
    return instance.__class
end

--- Ultimate super class  
---@class LuaObject
local LuaObject = {__clsName = "LuaObject", __baseClsName = ""}

function LuaObject:GetClassName()
    return self.__class.__clsName
end

function LuaObject:GetBaseName()
    return self.__class.__baseClsName
end

RegClass(LuaObject, "LuaObject", "")
